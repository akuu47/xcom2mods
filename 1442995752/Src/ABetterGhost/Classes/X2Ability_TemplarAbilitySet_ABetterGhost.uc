class X2Ability_TemplarAbilitySet_ABetterGhost extends X2Ability_TemplarAbilitySet;

static function array<X2DataTemplate> CreateTemplates()
{
	local array<X2DataTemplate> Templates;

	Templates.AddItem(Overcharge());
	Templates.AddItem(Ghost());
	Templates.AddItem(GhostInit());

	return Templates;
}

static function X2AbilityTemplate Overcharge()
{
	local X2AbilityTemplate Template;
	local X2Effect_ModifyTemplarFocus FocusEffect;
	local X2AbilityTrigger_EventListener EventListener;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'Overcharge');
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Overcharge";
	Template.Hostility = eHostility_Neutral;
//BEGIN AUTOGENERATED CODE: Template Overrides 'Overcharge'
	Template.AbilitySourceName = 'eAbilitySource_Psionic';
//END AUTOGENERATED CODE: Template Overrides 'Overcharge'
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;

	Template.AdditionalAbilities.AddItem('OverchargePassive');
	Template.PrerequisiteAbilities.AddItem('Rend');
	
	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;

	EventListener = new class'X2AbilityTrigger_EventListener';
	EventListener.ListenerData.Deferral = ELD_OnStateSubmitted;
	EventListener.ListenerData.EventFn = class'XComGameState_Ability'.static.TemplarRendTargetAliveListener;
	EventListener.ListenerData.EventID = 'RendActivated';
	EventListener.ListenerData.Filter = eFilter_Unit;
	Template.AbilityTriggers.AddItem(EventListener);

	//	Chance to grant focus when activating Rend if the Templar has Overcharge
	FocusEffect = new class'X2Effect_ModifyTemplarFocus';
	FocusEffect.ApplyChance = default.OVERCHARGE_FOCUS_CHANCE;
	Template.AddShooterEffect(FocusEffect);

	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	//  NOTE: No visualization on purpose!

	Template.bShowPostActivation = true;
	Template.bSkipFireAction = true;

	return Template;
}

static function X2AbilityTemplate Ghost()
{
	local X2AbilityTemplate				Template;
	local X2AbilityCost_ActionPoints	ActionPointCost;
	local X2Condition_UnitValue			ValueCondition;
	local X2Condition_UnitProperty		TargetCondition;
	local X2Effect_SpawnGhost			GhostEffect;
	local X2AbilityCharges				Charges;
	local X2AbilityCost_Focus			FocusCost;
	local X2AbilityCost_Charges			ChargeCost;
	local X2Condition_UnitEffects		GhostKillCondition;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'Ghost');

//BEGIN AUTOGENERATED CODE: Template Overrides 'Ghost'
	Template.AbilitySourceName = 'eAbilitySource_Psionic';
	Template.ActivationSpeech = 'Ghost';
	Template.CinescriptCameraType = "Templar_Ghost";
//END AUTOGENERATED CODE: Template Overrides 'Ghost'
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_HideSpecificErrors;
	Template.HideErrors.AddItem('AA_UnitIsWrongType');
	Template.Hostility = eHostility_Neutral;
	Template.IconImage = "img:///UILibrary_XPACK_Common.PerkIcons.UIPerk_Ghost";
	Template.AbilityConfirmSound = "TacticalUI_ActivateAbility";

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SimpleSingleTarget;
	Template.AbilityTriggers.AddItem(default.PlayerInputTrigger);

	FocusCost = new class'X2AbilityCost_Focus';
	FocusCost.FocusAmount = default.GhostFocusCost;
	Template.AbilityCosts.AddItem(FocusCost);

	Charges = new class'X2AbilityCharges';
	Charges.InitialCharges = default.GHOST_CHARGES;
	Template.AbilityCharges = Charges;

	ChargeCost = new class'X2AbilityCost_Charges';
	ChargeCost.NumCharges = 1;
	Template.AbilityCosts.AddItem(ChargeCost);

	ActionPointCost = new class'X2AbilityCost_ActionPoints';
	ActionPointCost.iNumPoints = 1;
	ActionPointCost.bConsumeAllPoints = true;
	Template.AbilityCosts.AddItem(ActionPointCost);
	
	Template.AbilityShooterConditions.AddItem(default.LivingShooterProperty);
	Template.AddShooterEffectExclusions();

	ValueCondition = new class'X2Condition_UnitValue';
	ValueCondition.AddCheckValue(class'X2Effect_SpawnGhost'.default.SpawnedUnitValueName, 0, , , , 'AA_UnitIsImmune');
	Template.AbilityTargetConditions.AddItem(ValueCondition);

	TargetCondition = new class'X2Condition_UnitProperty';
	TargetCondition.ExcludeFriendlyToSource = false;
	TargetCondition.ExcludeHostileToSource = false;
	TargetCondition.ExcludeDead = false;
	TargetCondition.ExcludeAlive = true;
	TargetCondition.FailOnNonUnits = true;
	TargetCondition.ExcludeRobotic = true;
	TargetCondition.ExcludeAlien = true;
	TargetCondition.RequireWithinRange = true;
	Template.AbilityTargetConditions.AddItem(TargetCondition);
	Template.AbilityTargetConditions.AddItem(default.GameplayVisibilityCondition);

	// Jwats: Dead ghosts can't be used to create more ghosts
	GhostKillCondition = new class'X2Condition_UnitEffects';
	GhostKillCondition.AddExcludeEffect('GhostKillUnit', 'AA_DuplicateEffectIgnored');
	Template.AbilityTargetConditions.AddItem(GhostKillCondition);

	GhostEffect = new class'X2Effect_SpawnGhost';
	GhostEffect.BuildPersistentEffect(1, true, true);
	Template.AddTargetEffect(GhostEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;
	Template.BuildVisualizationFn = Ghost_BuildVisualization;
	
	Template.ChosenActivationIncreasePerUse = class'X2AbilityTemplateManager'.default.NonAggressiveChosenActivationIncreasePerUse;
	
	return Template;
}

static function X2AbilityTemplate GhostInit()
{
	local X2AbilityTemplate Template;
	local X2Effect_DamageImmunity DamageImmunity;
	local X2Effect_GhostStuff GhostEffect;

	`CREATE_X2ABILITY_TEMPLATE(Template, 'GhostInit');

	Template.AbilitySourceName = 'eAbilitySource_Perk';
	Template.eAbilityIconBehaviorHUD = eAbilityIconBehavior_NeverShow;
	Template.Hostility = eHostility_Neutral;

	Template.AbilityToHitCalc = default.DeadEye;
	Template.AbilityTargetStyle = default.SelfTarget;
	Template.AbilityTriggers.AddItem(default.UnitPostBeginPlayTrigger);

	// Build the immunities
	DamageImmunity = new class'X2Effect_DamageImmunity';
	DamageImmunity.BuildPersistentEffect(1, true, false, true);
	DamageImmunity.ImmuneTypes.AddItem(class'X2Item_DefaultDamageTypes'.default.ParthenogenicPoisonType);
	DamageImmunity.ImmuneTypes.AddItem('Mental');
	DamageImmunity.ImmuneTypes.AddItem(class'X2Item_DefaultDamageTypes'.default.DisorientDamageType);
	DamageImmunity.ImmuneTypes.AddItem('stun');
	DamageImmunity.ImmuneTypes.AddItem('unconscious');
	DamageImmunity.ImmuneTypes.AddItem('bleeding');
	DamageImmunity.EffectName = 'GhostImmunity';
	Template.AddTargetEffect(DamageImmunity);

	GhostEffect = new class'X2Effect_GhostStuff';
	GhostEffect.BuildPersistentEffect(1, true, false, true);
	GhostEffect.EffectName = 'GhostStuff';
	Template.AddTargetEffect(GhostEffect);

	Template.BuildNewGameStateFn = TypicalAbility_BuildGameState;

	return Template;
}